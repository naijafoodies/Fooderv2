<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\NFCore\Geo\GeoLocate;
use App\Models\Vendor;
use App\Models\VendorAddress;
use App\Models\VendorContact;
use App\Models\VendorContract;
use App\Models\VendorUser;
use App\Models\VendorDescription;
use App\Models\VendorEmblem;
use App\NFCore\Utils\PasswordService;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\File;

class VendorController extends Controller {

  /**
  * Function through a post request helps with user enrollment
  * It accepts a url encoded form. Function expects all vendor address, contacts, contract details and general details to be with the form
  *
  * @param Request
  * @return vendorId - This is the system id of the vendor
  */
  public function enroll(Request $request) {
    $success = false;

    $location = new GeoLocate();

    // instantiate models
    $vendor = new Vendor();
    $contact = new VendorContact();
    $address = new VendorAddress();
    $contract = new VendorContract();
    $user = new VendorUser();
    $description = new VendorDescription();
    $emblem = new VendorEmblem();

    try {
      $vendor->name = $request->name;
      $vendor->email = $request->email;
      $vendor->save();

      $contact->vendor_id = $vendor->id;
      $contact->work_phone = $request->work_phone;
      $contact->mobile_phone = $request->mobile_phone;
      $contact->fax = $request->fax;
      $contact->save();

      $location->getAddress($request->street.', '.$request->city.', '.$request->state.' '.$request->zipcode);
      $address->latitude = $location->getLatitude();
      $address->longitude = $location->getLongitude();
      $address->vendor_id = $vendor->id;
      $address->address = $request->address;
      $address->city = $request->city;
      $address->state = $request->state;
      $address->zipcode = $request->zipcode;
      $address->save();

      $contract->vendor_id = $vendor->id;
      $contract->contract_type_id = $request->contract_type;
      $contract->contract_term = $request->contract_term;
      $contract->tax_rate = $request->tax_rate;
      $contract->start_date = date('Y-m-d H:i:s');
      $contract->end_date = ($request->contract_type == 1) ? date('Y-m-d H:i:s',strtotime('+3 months')) : date('Y-m-d H:i:s',strtotime('+1 year'));
      $contract->save();

      $description->vendor_id = $vendor->id;
      $description->description = $request->description;
      $description->save();

      $emblem->vendor_id = $vendor->id;
      $emblem->file_name = $request->file('emblem_file')->store('emblems');
      $emblem->save();

      /**
      * I will be creating authentication credentials for vendors here. Password is generated by password service and an email is sent upon finishing
      */
      $user->system_id = $vendor->id;
      $user->name = $request->name;
      $user->email = $request->email;
      $user->password = bcrypt(PasswordService::generatePassword());
      $user->save();

      return response()->json([
        'success' => true,
        'registration_id' => $vendor->id
      ]);
    }
    catch(Exception $e) {
      return response()->json([
        'success' => false,
        'registration_id' => 'Server Error. Please contact tech support'
      ]);
    }

  }

  public function getActiveVendors() {
    return response()->json(Vendor::all());
  }

}
